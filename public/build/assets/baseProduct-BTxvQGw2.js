import{cj as a,ay as e}from"./main-DsI8-tAT.js";import{$ as s}from"./api-lq_cZUAT.js";import{C as c}from"./CategoriesApi-vMJe6lm6.js";const d=a("baseProduct",{state:()=>({baseProducts:[],movements:[],compositions:[],loading:!1,pagination:{current_page:1,last_page:1,per_page:15,total:0,from:0,to:0}}),actions:{async fetchBaseProducts(t){this.loading=!0;try{const o=await e.get("/api/base-products",{params:t});return console.log("fetchBaseProducts response:",o.data),o.data.data?this.baseProducts=Array.isArray(o.data.data)?o.data.data:[]:this.baseProducts=[],o.data.pagination?this.pagination=o.data.pagination:o.data.meta&&(this.pagination=o.data.meta),console.log("Base products loaded:",this.baseProducts.length),o.data}catch(o){throw console.error("Error fetching base products:",o),this.baseProducts=[],o}finally{this.loading=!1}},async createBaseProduct(t){try{return(await e.post("/api/base-products",t,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(o){throw console.error("Error creating base product:",o),o}},async updateBaseProduct(t,o){try{return o.append("_method","PUT"),(await e.post(`/api/base-products/${t}`,o,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(r){throw console.error("Error updating base product:",r),r}},async deleteBaseProduct(t){try{return(await e.delete(`/api/base-products/${t}`)).data}catch(o){throw console.error("Error deleting base product:",o),o}},async updateStock(t,o){try{return(await e.post(`/api/base-products/${t}/stock`,o)).data}catch(r){throw console.error("Error updating stock:",r),r}},async fetchCategories(){try{const t=await c.getCategories({page:1,per_page:100,status:"active"});return{success:t.success,data:t.data,message:t.message||"Categories retrieved successfully"}}catch(t){throw console.error("Error fetching categories:",t),t}},async fetchCompositions(t){this.loading=!0;try{const o=await s("/product-compositions",{method:"GET",query:t});return this.compositions=o.data,o.pagination&&(this.pagination=o.pagination),o}catch(o){throw console.error("Error fetching compositions:",o),o}finally{this.loading=!1}},async createComposition(t){try{return await s("/product-compositions",{method:"POST",body:t})}catch(o){throw console.error("Error creating composition:",o),o}},async updateComposition(t,o){try{return await s(`/product-compositions/${t}`,{method:"PUT",body:o})}catch(r){throw console.error("Error updating composition:",r),r}},async deleteComposition(t){try{return await s(`/product-compositions/${t}`,{method:"DELETE"})}catch(o){throw console.error("Error deleting composition:",o),o}},async fetchProducts(){try{return await s("/product-compositions/products",{method:"GET"})}catch(t){throw console.error("Error fetching products:",t),t}},async fetchAvailableBaseProducts(){try{return(await e.get("/api/product-compositions/base-products")).data}catch(t){throw console.error("Error fetching available base products:",t),t}},async checkProductionAvailability(t,o){try{return await s(`/product-compositions/production-check/${t}`,{method:"GET",query:{quantity:o}})}catch(r){throw console.error("Error checking production availability:",r),r}},async fetchMovements(t,o){try{const r=await e.get(`/api/base-products/${t}/movements`,{params:o});return this.movements=r.data.data,r.data}catch(r){throw console.error("Error fetching movements:",r),r}},async bulkUpdateBaseProducts(t,o){try{return(await e.post("/api/base-products/bulk-update",{ids:t,...o})).data}catch(r){throw console.error("Error bulk updating base products:",r),r}},async bulkDeleteBaseProducts(t){try{return(await e.delete("/api/base-products/bulk-delete",{data:{ids:t}})).data}catch(o){throw console.error("Error bulk deleting base products:",o),o}},async bulkUpdateCompositions(t,o){try{return await s("/product-compositions/bulk-update",{method:"POST",body:{ids:t,...o}})}catch(r){throw console.error("Error bulk updating compositions:",r),r}},async bulkDeleteCompositions(t){try{return await s("/product-compositions/bulk-delete",{method:"DELETE",body:{ids:t}})}catch(o){throw console.error("Error bulk deleting compositions:",o),o}},async getBaseProductsForSelection(){try{return(await e.get("/api/base-products/for-selection")).data}catch(t){throw console.error("Error fetching base products for selection:",t),t}}},getters:{getBaseProductById:t=>o=>t.baseProducts.find(r=>r.id_base_product===o),getActiveBaseProducts:t=>t.baseProducts.filter(o=>o.is_active),getInStockBaseProducts:t=>t.baseProducts.filter(o=>o.stock_status==="in_stock"),getLowStockBaseProducts:t=>t.baseProducts.filter(o=>o.stock_status==="low_stock"),getOutOfStockBaseProducts:t=>t.baseProducts.filter(o=>o.stock_status==="out_of_stock"),getCompositionById:t=>o=>t.compositions.find(r=>r.id_composition===o),getCompositionsByProduct:t=>o=>t.compositions.filter(r=>r.product_id===o),getCompositionsByBaseProduct:t=>o=>t.compositions.filter(r=>r.base_product_id===o),getActiveCompositions:t=>t.compositions.filter(o=>o.is_active)}});export{d as u};
