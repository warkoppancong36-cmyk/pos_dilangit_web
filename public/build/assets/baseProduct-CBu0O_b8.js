import{cj as a,aA as s}from"./main-Cofpy7Pj.js";import{$ as e}from"./api-ZlW5HooK.js";const i=a("baseProduct",{state:()=>({baseProducts:[],movements:[],compositions:[],loading:!1,pagination:{current_page:1,last_page:1,per_page:15,total:0,from:0,to:0}}),actions:{async fetchBaseProducts(r){this.loading=!0;try{const o=await e("/base-products",{method:"GET",query:r});return console.log("fetchBaseProducts response:",o),o.data?this.baseProducts=Array.isArray(o.data)?o.data:[]:this.baseProducts=[],o.pagination?this.pagination=o.pagination:o.meta&&(this.pagination=o.meta),console.log("Base products loaded:",this.baseProducts.length),o}catch(o){throw console.error("Error fetching base products:",o),this.baseProducts=[],o}finally{this.loading=!1}},async createBaseProduct(r){try{return(await s.post("/api/base-products",r,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(o){throw console.error("Error creating base product:",o),o}},async updateBaseProduct(r,o){try{return o.append("_method","PUT"),(await s.post(`/api/base-products/${r}`,o,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(t){throw console.error("Error updating base product:",t),t}},async deleteBaseProduct(r){try{return(await s.delete(`/api/base-products/${r}`)).data}catch(o){throw console.error("Error deleting base product:",o),o}},async updateStock(r,o){try{return await e(`/base-products/${r}/stock`,{method:"POST",body:o})}catch(t){throw console.error("Error updating stock:",t),t}},async fetchCategories(){try{return await e("/categories",{method:"GET",query:{page:1,per_page:100,status:"active"}})}catch(r){throw console.error("Error fetching categories:",r),r}},async fetchCompositions(r){this.loading=!0;try{const o=await e("/product-compositions",{method:"GET",query:r});return this.compositions=o.data,o.pagination&&(this.pagination=o.pagination),o}catch(o){throw console.error("Error fetching compositions:",o),o}finally{this.loading=!1}},async createComposition(r){try{return await e("/product-compositions",{method:"POST",body:r})}catch(o){throw console.error("Error creating composition:",o),o}},async updateComposition(r,o){try{return await e(`/product-compositions/${r}`,{method:"PUT",body:o})}catch(t){throw console.error("Error updating composition:",t),t}},async deleteComposition(r){try{return await e(`/product-compositions/${r}`,{method:"DELETE"})}catch(o){throw console.error("Error deleting composition:",o),o}},async fetchProducts(){try{return await e("/product-compositions/products",{method:"GET"})}catch(r){throw console.error("Error fetching products:",r),r}},async fetchAvailableBaseProducts(){try{return await e("/product-compositions/base-products",{method:"GET"})}catch(r){throw console.error("Error fetching available base products:",r),r}},async checkProductionAvailability(r,o){try{return await e(`/product-compositions/production-check/${r}`,{method:"GET",query:{quantity:o}})}catch(t){throw console.error("Error checking production availability:",t),t}},async fetchMovements(r,o){try{const t=await e(`/base-products/${r}/movements`,{method:"GET",query:o});return this.movements=t.data,t}catch(t){throw console.error("Error fetching movements:",t),t}},async bulkUpdateBaseProducts(r,o){try{return await e("/base-products/bulk-update",{method:"POST",body:{ids:r,...o}})}catch(t){throw console.error("Error bulk updating base products:",t),t}},async bulkDeleteBaseProducts(r){try{return await e("/base-products/bulk-delete",{method:"DELETE",body:{ids:r}})}catch(o){throw console.error("Error bulk deleting base products:",o),o}},async bulkUpdateCompositions(r,o){try{return await e("/product-compositions/bulk-update",{method:"POST",body:{ids:r,...o}})}catch(t){throw console.error("Error bulk updating compositions:",t),t}},async bulkDeleteCompositions(r){try{return await e("/product-compositions/bulk-delete",{method:"DELETE",body:{ids:r}})}catch(o){throw console.error("Error bulk deleting compositions:",o),o}}},getters:{getBaseProductById:r=>o=>r.baseProducts.find(t=>t.id_base_product===o),getActiveBaseProducts:r=>r.baseProducts.filter(o=>o.is_active),getInStockBaseProducts:r=>r.baseProducts.filter(o=>o.stock_status==="in_stock"),getLowStockBaseProducts:r=>r.baseProducts.filter(o=>o.stock_status==="low_stock"),getOutOfStockBaseProducts:r=>r.baseProducts.filter(o=>o.stock_status==="out_of_stock"),getCompositionById:r=>o=>r.compositions.find(t=>t.id_composition===o),getCompositionsByProduct:r=>o=>r.compositions.filter(t=>t.product_id===o),getCompositionsByBaseProduct:r=>o=>r.compositions.filter(t=>t.base_product_id===o),getActiveCompositions:r=>r.compositions.filter(o=>o.is_active)}});export{i as u};
