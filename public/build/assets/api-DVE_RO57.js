import{a2 as g,a3 as E}from"./main-5j-NPNqe.js";import{a as q,w as S}from"./index-D-EbNoF1.js";class $ extends Error{constructor(r,s){super(r,s),this.name="FetchError",s!=null&&s.cause&&!this.cause&&(this.cause=s.cause)}}function R(o){var i,p,e,c,u;const r=((i=o.error)==null?void 0:i.message)||((p=o.error)==null?void 0:p.toString())||"",s=((e=o.request)==null?void 0:e.method)||((c=o.options)==null?void 0:c.method)||"GET",f=((u=o.request)==null?void 0:u.url)||String(o.request)||"/",y=`[${s}] ${JSON.stringify(f)}`,a=o.response?`${o.response.status} ${o.response.statusText}`:"<no response>",d=`${y}: ${a}${r?` ${r}`:""}`,t=new $(d,o.error?{cause:o.error}:void 0);for(const n of["request","options","response"])Object.defineProperty(t,n,{get(){return o[n]}});for(const[n,h]of[["data","_data"],["status","status"],["statusCode","status"],["statusText","statusText"],["statusMessage","statusText"]])Object.defineProperty(t,n,{get(){return o.response&&o.response[h]}});return t}const A=new Set(Object.freeze(["PATCH","POST","PUT","DELETE"]));function m(o="GET"){return A.has(o.toUpperCase())}function j(o){if(o===void 0)return!1;const r=typeof o;return r==="string"||r==="number"||r==="boolean"||r===null?!0:r!=="object"?!1:Array.isArray(o)?!0:o.buffer?!1:o.constructor&&o.constructor.name==="Object"||typeof o.toJSON=="function"}const C=new Set(["image/svg","application/xml","application/xhtml","application/html"]),k=/^application\/(?:[\w!#$%&*.^`~-]*\+)?json(;.+)?$/i;function H(o=""){if(!o)return"json";const r=o.split(";").shift()||"";return k.test(r)?"json":C.has(r)||r.startsWith("text/")?"text":"blob"}function O(o,r,s,f){const y=N((r==null?void 0:r.headers)??(o==null?void 0:o.headers),s==null?void 0:s.headers,f);let a;return(s!=null&&s.query||s!=null&&s.params||r!=null&&r.params||r!=null&&r.query)&&(a={...s==null?void 0:s.params,...s==null?void 0:s.query,...r==null?void 0:r.params,...r==null?void 0:r.query}),{...s,...r,query:a,params:a,headers:y}}function N(o,r,s){if(!r)return new s(o);const f=new s(r);if(o)for(const[y,a]of Symbol.iterator in o||Array.isArray(o)?o:new s(o))f.set(y,a);return f}async function l(o,r){if(r)if(Array.isArray(r))for(const s of r)await s(o);else await r(o)}const P=new Set([408,409,425,429,500,502,503,504]),D=new Set([101,204,205,304]);function w(o={}){const{fetch:r=globalThis.fetch,Headers:s=globalThis.Headers,AbortController:f=globalThis.AbortController}=o;async function y(t){const i=t.error&&t.error.name==="AbortError"&&!t.options.timeout||!1;if(t.options.retry!==!1&&!i){let e;typeof t.options.retry=="number"?e=t.options.retry:e=m(t.options.method)?0:1;const c=t.response&&t.response.status||500;if(e>0&&(Array.isArray(t.options.retryStatusCodes)?t.options.retryStatusCodes.includes(c):P.has(c))){const u=typeof t.options.retryDelay=="function"?t.options.retryDelay(t):t.options.retryDelay||0;return u>0&&await new Promise(n=>setTimeout(n,u)),a(t.request,{...t.options,retry:e-1})}}const p=R(t);throw Error.captureStackTrace&&Error.captureStackTrace(p,a),p}const a=async function(i,p={}){const e={request:i,options:O(i,p,o.defaults,s),response:void 0,error:void 0};e.options.method&&(e.options.method=e.options.method.toUpperCase()),e.options.onRequest&&await l(e,e.options.onRequest),typeof e.request=="string"&&(e.options.baseURL&&(e.request=q(e.request,e.options.baseURL)),e.options.query&&(e.request=S(e.request,e.options.query),delete e.options.query),"query"in e.options&&delete e.options.query,"params"in e.options&&delete e.options.params),e.options.body&&m(e.options.method)&&(j(e.options.body)?(e.options.body=typeof e.options.body=="string"?e.options.body:JSON.stringify(e.options.body),e.options.headers=new s(e.options.headers||{}),e.options.headers.has("content-type")||e.options.headers.set("content-type","application/json"),e.options.headers.has("accept")||e.options.headers.set("accept","application/json")):("pipeTo"in e.options.body&&typeof e.options.body.pipeTo=="function"||typeof e.options.body.pipe=="function")&&("duplex"in e.options||(e.options.duplex="half")));let c;if(!e.options.signal&&e.options.timeout){const n=new f;c=setTimeout(()=>{const h=new Error("[TimeoutError]: The operation was aborted due to timeout");h.name="TimeoutError",h.code=23,n.abort(h)},e.options.timeout),e.options.signal=n.signal}try{e.response=await r(e.request,e.options)}catch(n){return e.error=n,e.options.onRequestError&&await l(e,e.options.onRequestError),await y(e)}finally{c&&clearTimeout(c)}if((e.response.body||e.response._bodyInit)&&!D.has(e.response.status)&&e.options.method!=="HEAD"){const n=(e.options.parseResponse?"json":e.options.responseType)||H(e.response.headers.get("content-type")||"");switch(n){case"json":{const h=await e.response.text(),T=e.options.parseResponse||g;e.response._data=T(h);break}case"stream":{e.response._data=e.response.body||e.response._bodyInit;break}default:e.response._data=await e.response[n]()}}return e.options.onResponse&&await l(e,e.options.onResponse),!e.options.ignoreResponseError&&e.response.status>=400&&e.response.status<600?(e.options.onResponseError&&await l(e,e.options.onResponseError),await y(e)):e.response},d=async function(i,p){return(await a(i,p))._data};return d.raw=a,d.native=(...t)=>r(...t),d.create=(t={},i={})=>w({...o,...i,defaults:{...o.defaults,...i.defaults,...t}}),d}const b=function(){if(typeof globalThis<"u")return globalThis;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw new Error("unable to locate global object")}(),F=b.fetch?(...o)=>b.fetch(...o):()=>Promise.reject(new Error("[ofetch] global.fetch is not supported!")),U=b.Headers,_=b.AbortController,B=w({fetch:F,Headers:U,AbortController:_}),L=B.create({baseURL:"http://localhost:8000/api",async onRequest({options:o}){const r=E("accessToken").value;console.log("üîê $api onRequest - Token:",r?"EXISTS":"NOT FOUND"),r?(o.headers||(o.headers=new Headers),o.headers instanceof Headers?o.headers.set("Authorization",`Bearer ${r}`):o.headers.Authorization=`Bearer ${r}`,console.log("‚úÖ $api - Authorization header added")):console.log("‚ùå $api - No access token found")}});export{L as $};
