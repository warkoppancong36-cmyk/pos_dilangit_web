import{cj as a,ay as e}from"./main-CZcwCq2A.js";import{$ as s}from"./api-ULoQvb4X.js";import{C as c}from"./CategoriesApi-DBfgLhyn.js";const d=a("baseProduct",{state:()=>({baseProducts:[],movements:[],compositions:[],loading:!1,pagination:{current_page:1,last_page:1,per_page:15,total:0,from:0,to:0}}),actions:{async fetchBaseProducts(r){this.loading=!0;try{const t=await e.get("/api/base-products",{params:r});return t.data.data?this.baseProducts=Array.isArray(t.data.data)?t.data.data:[]:this.baseProducts=[],t.data.pagination?this.pagination=t.data.pagination:t.data.meta&&(this.pagination=t.data.meta),t.data}catch(t){throw console.error("Error fetching base products:",t),this.baseProducts=[],t}finally{this.loading=!1}},async createBaseProduct(r){try{return(await e.post("/api/base-products",r,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(t){throw console.error("Error creating base product:",t),t}},async updateBaseProduct(r,t){try{return t.append("_method","PUT"),(await e.post(`/api/base-products/${r}`,t,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(o){throw console.error("Error updating base product:",o),o}},async deleteBaseProduct(r){try{return(await e.delete(`/api/base-products/${r}`)).data}catch(t){throw console.error("Error deleting base product:",t),t}},async updateStock(r,t){try{return(await e.post(`/api/base-products/${r}/stock`,t)).data}catch(o){throw console.error("Error updating stock:",o),o}},async fetchCategories(){try{const r=await c.getCategories({page:1,per_page:100,status:"active"});return{success:r.success,data:r.data,message:r.message||"Categories retrieved successfully"}}catch(r){throw console.error("Error fetching categories:",r),r}},async fetchCompositions(r){this.loading=!0;try{const t=await s("/product-compositions",{method:"GET",query:r});return this.compositions=t.data,t.pagination&&(this.pagination=t.pagination),t}catch(t){throw console.error("Error fetching compositions:",t),t}finally{this.loading=!1}},async createComposition(r){try{return await s("/product-compositions",{method:"POST",body:r})}catch(t){throw console.error("Error creating composition:",t),t}},async updateComposition(r,t){try{return await s(`/product-compositions/${r}`,{method:"PUT",body:t})}catch(o){throw console.error("Error updating composition:",o),o}},async deleteComposition(r){try{return await s(`/product-compositions/${r}`,{method:"DELETE"})}catch(t){throw console.error("Error deleting composition:",t),t}},async fetchProducts(){try{return await s("/product-compositions/products",{method:"GET"})}catch(r){throw console.error("Error fetching products:",r),r}},async fetchAvailableBaseProducts(){try{return(await e.get("/api/product-compositions/base-products")).data}catch(r){throw console.error("Error fetching available base products:",r),r}},async checkProductionAvailability(r,t){try{return await s(`/product-compositions/production-check/${r}`,{method:"GET",query:{quantity:t}})}catch(o){throw console.error("Error checking production availability:",o),o}},async fetchMovements(r,t){try{const o=await e.get(`/api/base-products/${r}/movements`,{params:t});return this.movements=o.data.data,o.data}catch(o){throw console.error("Error fetching movements:",o),o}},async bulkUpdateBaseProducts(r,t){try{return(await e.post("/api/base-products/bulk-update",{ids:r,...t})).data}catch(o){throw console.error("Error bulk updating base products:",o),o}},async bulkDeleteBaseProducts(r){try{return(await e.delete("/api/base-products/bulk-delete",{data:{ids:r}})).data}catch(t){throw console.error("Error bulk deleting base products:",t),t}},async bulkUpdateCompositions(r,t){try{return await s("/product-compositions/bulk-update",{method:"POST",body:{ids:r,...t}})}catch(o){throw console.error("Error bulk updating compositions:",o),o}},async bulkDeleteCompositions(r){try{return await s("/product-compositions/bulk-delete",{method:"DELETE",body:{ids:r}})}catch(t){throw console.error("Error bulk deleting compositions:",t),t}},async getBaseProductsForSelection(){try{return(await e.get("/api/base-products/for-selection")).data}catch(r){throw console.error("Error fetching base products for selection:",r),r}}},getters:{getBaseProductById:r=>t=>r.baseProducts.find(o=>o.id_base_product===t),getActiveBaseProducts:r=>r.baseProducts.filter(t=>t.is_active),getInStockBaseProducts:r=>r.baseProducts.filter(t=>t.stock_status==="in_stock"),getLowStockBaseProducts:r=>r.baseProducts.filter(t=>t.stock_status==="low_stock"),getOutOfStockBaseProducts:r=>r.baseProducts.filter(t=>t.stock_status==="out_of_stock"),getCompositionById:r=>t=>r.compositions.find(o=>o.id_composition===t),getCompositionsByProduct:r=>t=>r.compositions.filter(o=>o.product_id===t),getCompositionsByBaseProduct:r=>t=>r.compositions.filter(o=>o.base_product_id===t),getActiveCompositions:r=>r.compositions.filter(t=>t.is_active)}});export{d as u};
